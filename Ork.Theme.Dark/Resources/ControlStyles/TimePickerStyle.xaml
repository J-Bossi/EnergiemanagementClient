<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit">
  <Style
    TargetType="{x:Type xctk:TimePicker}">
    <Setter
      Property="Template"
      Value="{DynamicResource TimePickerControlTemplate}" />
    <Setter
      Property="Foreground"
      Value="{DynamicResource TextForegroundColorBrush}" />
    <Style.Triggers>
      <DataTrigger
        Binding="{Binding IsChecked, ElementName=SelectWholeDay}"
        Value="True">
        <Setter
          Property="Visibility"
          Value="Collapsed" />
      </DataTrigger>
      <DataTrigger
        Binding="{Binding IsChecked, ElementName=SelectWholeDay}"
        Value="False">
        <Setter
          Property="Visibility"
          Value="Visible" />
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <ControlTemplate
    x:Key="TimePickerControlTemplate"
    TargetType="{x:Type xctk:TimePicker}">
    <Border>
      <Grid>
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition
              Width="*" />
            <ColumnDefinition
              Width="Auto" />
          </Grid.ColumnDefinitions>
          <xctk:DateTimeUpDown
            x:Name="PART_TimeUpDown"
            AllowSpin="{TemplateBinding AllowSpin}"
            BorderThickness="1,1,0,1"
            Background="{TemplateBinding Background}"
            ContextMenu="{TemplateBinding ContextMenu}"
            Foreground="{TemplateBinding Foreground}"
            FormatString="{TemplateBinding FormatString}"
            ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}"
            TextAlignment="{TemplateBinding TextAlignment}"
            Text=""
            TabIndex="{TemplateBinding TabIndex}"
            Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}"
            WatermarkTemplate="{TemplateBinding WatermarkTemplate}"
            Watermark="{TemplateBinding Watermark}">
            <xctk:DateTimeUpDown.Format>
              <TemplateBinding
                Property="Format">
                <TemplateBinding.Converter>
                  <xctk:TimeFormatToDateTimeFormatConverter />
                </TemplateBinding.Converter>
              </TemplateBinding>
            </xctk:DateTimeUpDown.Format>
          </xctk:DateTimeUpDown>
          <ToggleButton
            x:Name="_timePickerToggleButton"
            Grid.Column="1"
            Focusable="False"
            IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}">
            <ToggleButton.IsHitTestVisible>
              <Binding
                Path="IsOpen"
                RelativeSource="{RelativeSource TemplatedParent}">
                <Binding.Converter>
                  <xctk:InverseBoolConverter />
                </Binding.Converter>
              </Binding>
            </ToggleButton.IsHitTestVisible>
            <ToggleButton.Style>
              <Style
                TargetType="{x:Type ToggleButton}">
                <Setter
                  Property="Template">
                  <Setter.Value>
                    <ControlTemplate
                      TargetType="{x:Type ToggleButton}">
                      <Grid
                        SnapsToDevicePixels="True">
                        <xctk:ButtonChrome
                          x:Name="ToggleButtonChrome"
                          CornerRadius="0"
                          RenderMouseOver="{TemplateBinding IsMouseOver}"
                          RenderPressed="{TemplateBinding IsPressed}"
                          RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:TimePicker}}}"
                          RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:TimePicker}}}">
                          <Grid>
                            <Grid.ColumnDefinitions>
                              <ColumnDefinition
                                Width="*" />
                              <ColumnDefinition
                                Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              Content="{TemplateBinding Content}"
                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                              HorizontalAlignment="Stretch"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="Stretch" />
                            <Grid
                              x:Name="arrowGlyph"
                              Grid.Column="1"
                              IsHitTestVisible="False"
                              Margin="5">
                              <Path
                                x:Name="Arrow"
                                Data="M0,1C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1z"
                                Fill="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                Height="4"
                                Width="7" />
                            </Grid>
                          </Grid>
                        </xctk:ButtonChrome>
                      </Grid>
                      <ControlTemplate.Triggers>
                        <Trigger
                          Property="IsEnabled"
                          Value="False">
                          <Setter
                            Property="Fill"
                            TargetName="Arrow"
                            Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                      </ControlTemplate.Triggers>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </ToggleButton.Style>
          </ToggleButton>
        </Grid>
        <Popup
          x:Name="PART_Popup"
          IsOpen="{Binding IsChecked, ElementName=_timePickerToggleButton}"
          StaysOpen="False">
          <Grid>
            <ListBox
              x:Name="PART_TimeListItems"
              BorderThickness="0"
              DisplayMemberPath="Display"
              Height="130"
              Width="150">
              <ListBox.ItemContainerStyle>
                <Style
                  TargetType="{x:Type ListBoxItem}">
                  <Setter
                    Property="Template">
                    <Setter.Value>
                      <ControlTemplate
                        TargetType="{x:Type ListBoxItem}">
                        <Border
                          x:Name="Border"
                          SnapsToDevicePixels="True"
                          Background="{DynamicResource WorkspaceBackgroundColorBrush}">
                          <TextBlock
                            Padding="5 5 0 5"
                            Text="{Binding Path=Display}"
                            Foreground="{DynamicResource TextForegroundColorBrush}" />
                        </Border>
                        <ControlTemplate.Triggers>
                          <MultiTrigger>
                            <MultiTrigger.Conditions>
                              <Condition
                                Property="IsMouseOver"
                                Value="True" />
                              <Condition
                                Property="IsSelected"
                                Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter
                              Property="Background"
                              TargetName="Border"
                              Value="{DynamicResource HighlightMediumBrush}" />
                          </MultiTrigger>
                          <MultiTrigger>
                            <MultiTrigger.Conditions>
                              <Condition
                                Property="IsMouseOver"
                                Value="False" />
                              <Condition
                                Property="IsSelected"
                                Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter
                              Property="Background"
                              TargetName="Border"
                              Value="{DynamicResource HighlightBrush}" />
                          </MultiTrigger>
                          <MultiTrigger>
                            <MultiTrigger.Conditions>
                              <Condition
                                Property="IsMouseOver"
                                Value="True" />
                              <Condition
                                Property="IsSelected"
                                Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter
                              Property="Background"
                              TargetName="Border"
                              Value="{DynamicResource HighlightBrush}" />
                          </MultiTrigger>
                        </ControlTemplate.Triggers>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </ListBox.ItemContainerStyle>
            </ListBox>
          </Grid>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger
        Property="IsEnabled"
        Value="False">
        <Setter
          Property="Foreground"
          Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
      </Trigger>
      <Trigger
        Property="IsFocused"
        Value="True">
        <Setter
          Property="FocusManager.FocusedElement"
          TargetName="PART_TimeUpDown"
          Value="{Binding ElementName=PART_TimeUpDown}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
</ResourceDictionary>