//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ork.Employee.CredentialsManagement {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CredentialsManagement.CredentialsDatabaseAccessor")]
    public interface CredentialsDatabaseAccessor {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CredentialsDatabaseAccessor/Create", ReplyAction="http://tempuri.org/CredentialsDatabaseAccessor/CreateResponse")]
        void Create(string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/CredentialsDatabaseAccessor/Create", ReplyAction="http://tempuri.org/CredentialsDatabaseAccessor/CreateResponse")]
        System.IAsyncResult BeginCreate(string user, string password, System.AsyncCallback callback, object asyncState);
        
        void EndCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CredentialsDatabaseAccessor/UpdateUser", ReplyAction="http://tempuri.org/CredentialsDatabaseAccessor/UpdateUserResponse")]
        void UpdateUser(string oldUser, string newUser);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/CredentialsDatabaseAccessor/UpdateUser", ReplyAction="http://tempuri.org/CredentialsDatabaseAccessor/UpdateUserResponse")]
        System.IAsyncResult BeginUpdateUser(string oldUser, string newUser, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CredentialsDatabaseAccessor/UpdatePassword", ReplyAction="http://tempuri.org/CredentialsDatabaseAccessor/UpdatePasswordResponse")]
        void UpdatePassword(string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/CredentialsDatabaseAccessor/UpdatePassword", ReplyAction="http://tempuri.org/CredentialsDatabaseAccessor/UpdatePasswordResponse")]
        System.IAsyncResult BeginUpdatePassword(string user, string password, System.AsyncCallback callback, object asyncState);
        
        void EndUpdatePassword(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CredentialsDatabaseAccessor/Delete", ReplyAction="http://tempuri.org/CredentialsDatabaseAccessor/DeleteResponse")]
        void Delete(string user);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/CredentialsDatabaseAccessor/Delete", ReplyAction="http://tempuri.org/CredentialsDatabaseAccessor/DeleteResponse")]
        System.IAsyncResult BeginDelete(string user, System.AsyncCallback callback, object asyncState);
        
        void EndDelete(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CredentialsDatabaseAccessorChannel : Ork.Employee.CredentialsManagement.CredentialsDatabaseAccessor, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CredentialsDatabaseAccessorClient : System.ServiceModel.ClientBase<Ork.Employee.CredentialsManagement.CredentialsDatabaseAccessor>, Ork.Employee.CredentialsManagement.CredentialsDatabaseAccessor {
        
        private BeginOperationDelegate onBeginCreateDelegate;
        
        private EndOperationDelegate onEndCreateDelegate;
        
        private System.Threading.SendOrPostCallback onCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUserDelegate;
        
        private EndOperationDelegate onEndUpdateUserDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdatePasswordDelegate;
        
        private EndOperationDelegate onEndUpdatePasswordDelegate;
        
        private System.Threading.SendOrPostCallback onUpdatePasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteDelegate;
        
        private EndOperationDelegate onEndDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCompletedDelegate;
        
        public CredentialsDatabaseAccessorClient() {
        }
        
        public CredentialsDatabaseAccessorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CredentialsDatabaseAccessorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CredentialsDatabaseAccessorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CredentialsDatabaseAccessorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdatePasswordCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteCompleted;
        
        public void Create(string user, string password) {
            base.Channel.Create(user, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreate(string user, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreate(user, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCreate(System.IAsyncResult result) {
            base.Channel.EndCreate(result);
        }
        
        private System.IAsyncResult OnBeginCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string user = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return this.BeginCreate(user, password, callback, asyncState);
        }
        
        private object[] OnEndCreate(System.IAsyncResult result) {
            this.EndCreate(result);
            return null;
        }
        
        private void OnCreateCompleted(object state) {
            if ((this.CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateAsync(string user, string password) {
            this.CreateAsync(user, password, null);
        }
        
        public void CreateAsync(string user, string password, object userState) {
            if ((this.onBeginCreateDelegate == null)) {
                this.onBeginCreateDelegate = new BeginOperationDelegate(this.OnBeginCreate);
            }
            if ((this.onEndCreateDelegate == null)) {
                this.onEndCreateDelegate = new EndOperationDelegate(this.OnEndCreate);
            }
            if ((this.onCreateCompletedDelegate == null)) {
                this.onCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateCompleted);
            }
            base.InvokeAsync(this.onBeginCreateDelegate, new object[] {
                        user,
                        password}, this.onEndCreateDelegate, this.onCreateCompletedDelegate, userState);
        }
        
        public void UpdateUser(string oldUser, string newUser) {
            base.Channel.UpdateUser(oldUser, newUser);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateUser(string oldUser, string newUser, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUser(oldUser, newUser, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateUser(System.IAsyncResult result) {
            base.Channel.EndUpdateUser(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string oldUser = ((string)(inValues[0]));
            string newUser = ((string)(inValues[1]));
            return this.BeginUpdateUser(oldUser, newUser, callback, asyncState);
        }
        
        private object[] OnEndUpdateUser(System.IAsyncResult result) {
            this.EndUpdateUser(result);
            return null;
        }
        
        private void OnUpdateUserCompleted(object state) {
            if ((this.UpdateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUserAsync(string oldUser, string newUser) {
            this.UpdateUserAsync(oldUser, newUser, null);
        }
        
        public void UpdateUserAsync(string oldUser, string newUser, object userState) {
            if ((this.onBeginUpdateUserDelegate == null)) {
                this.onBeginUpdateUserDelegate = new BeginOperationDelegate(this.OnBeginUpdateUser);
            }
            if ((this.onEndUpdateUserDelegate == null)) {
                this.onEndUpdateUserDelegate = new EndOperationDelegate(this.OnEndUpdateUser);
            }
            if ((this.onUpdateUserCompletedDelegate == null)) {
                this.onUpdateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUserCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUserDelegate, new object[] {
                        oldUser,
                        newUser}, this.onEndUpdateUserDelegate, this.onUpdateUserCompletedDelegate, userState);
        }
        
        public void UpdatePassword(string user, string password) {
            base.Channel.UpdatePassword(user, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdatePassword(string user, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdatePassword(user, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdatePassword(System.IAsyncResult result) {
            base.Channel.EndUpdatePassword(result);
        }
        
        private System.IAsyncResult OnBeginUpdatePassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string user = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return this.BeginUpdatePassword(user, password, callback, asyncState);
        }
        
        private object[] OnEndUpdatePassword(System.IAsyncResult result) {
            this.EndUpdatePassword(result);
            return null;
        }
        
        private void OnUpdatePasswordCompleted(object state) {
            if ((this.UpdatePasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdatePasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdatePasswordAsync(string user, string password) {
            this.UpdatePasswordAsync(user, password, null);
        }
        
        public void UpdatePasswordAsync(string user, string password, object userState) {
            if ((this.onBeginUpdatePasswordDelegate == null)) {
                this.onBeginUpdatePasswordDelegate = new BeginOperationDelegate(this.OnBeginUpdatePassword);
            }
            if ((this.onEndUpdatePasswordDelegate == null)) {
                this.onEndUpdatePasswordDelegate = new EndOperationDelegate(this.OnEndUpdatePassword);
            }
            if ((this.onUpdatePasswordCompletedDelegate == null)) {
                this.onUpdatePasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdatePasswordCompleted);
            }
            base.InvokeAsync(this.onBeginUpdatePasswordDelegate, new object[] {
                        user,
                        password}, this.onEndUpdatePasswordDelegate, this.onUpdatePasswordCompletedDelegate, userState);
        }
        
        public void Delete(string user) {
            base.Channel.Delete(user);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDelete(string user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDelete(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDelete(System.IAsyncResult result) {
            base.Channel.EndDelete(result);
        }
        
        private System.IAsyncResult OnBeginDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string user = ((string)(inValues[0]));
            return this.BeginDelete(user, callback, asyncState);
        }
        
        private object[] OnEndDelete(System.IAsyncResult result) {
            this.EndDelete(result);
            return null;
        }
        
        private void OnDeleteCompleted(object state) {
            if ((this.DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteAsync(string user) {
            this.DeleteAsync(user, null);
        }
        
        public void DeleteAsync(string user, object userState) {
            if ((this.onBeginDeleteDelegate == null)) {
                this.onBeginDeleteDelegate = new BeginOperationDelegate(this.OnBeginDelete);
            }
            if ((this.onEndDeleteDelegate == null)) {
                this.onEndDeleteDelegate = new EndOperationDelegate(this.OnEndDelete);
            }
            if ((this.onDeleteCompletedDelegate == null)) {
                this.onDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteDelegate, new object[] {
                        user}, this.onEndDeleteDelegate, this.onDeleteCompletedDelegate, userState);
        }
    }
}
